import os
import telebot
from peewee import IntegrityError
from telebot.types import InlineKeyboardButton
import config
import funcs as f
import static
import db
from telegram_bot_pagination import InlineKeyboardPaginator

bot = telebot.TeleBot(config.TG_TOKEN)
main_menu = f.create_keyboard(
    static.start_markup, row_width=3, one_time_keyboard=True)
channel_id = -418014092  # Chanel for shopping


# FUNCS

def get_page(message, array, name, page=1):
    try:
        paginator = InlineKeyboardPaginator(
            len(array),
            current_page=page,
            data_pattern=f"{name}" + "#{page}"
        )
        print(page)

        buy_key = f"buy_{array[page - 1].product_id}"
        paginator.add_after(InlineKeyboardButton('üîô', callback_data='back'),
                            InlineKeyboardButton('ü§ë –ö—É–ø–∏—Ç—å ü§ë', callback_data=buy_key), )
        # paginator.add_after()

        bot.send_photo(
            message.chat.id,
            array[page - 1].photo,
            reply_markup=paginator.markup
        )
    except IndexError:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ")
        bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤",
                         reply_markup=f.create_inline_keyboard(static.cat_dict))


make_up_arr = []
d_arr = []
esthetic_arr = []
presets_arr = []
random_arr = []

# BACK


def back_main(m):
    bot.send_message(m.chat.id, '–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', reply_markup=main_menu)


@bot.callback_query_handler(func=lambda q: q.data == 'back')
def back_shop(q):
    bot.delete_message(
        q.message.chat.id,
        q.message.message_id
    )
    bot.send_message(q.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤",
                     reply_markup=f.create_inline_keyboard(static.cat_dict))


@bot.callback_query_handler(func=lambda q: q.data == 'back_main')
def back_main_menu(q):
    bot.delete_message(
        q.message.chat.id,
        q.message.message_id
    )
    back_main(q.message)


# START

@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_message(
        message.chat.id, f"<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>\n\n–≠—Ç–æ –º–∞–≥–∞–∑–∏–Ω —Å –º–∞—Å–∫–∞–º–∏:"
                         f" –∑–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞—Å —Ç–æ—á–Ω–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∞ –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –º—ã –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º."
                         f"\n\n–¢–∞–∫–∂–µ –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω —Å–∞–π—Ç, –±–æ—Ç –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω –≤ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º–º, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞–ºüòâ",
        reply_markup=main_menu, parse_mode='html')
    bot.send_message(channel_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –∑–∞—à–µ–ª –≤ –º–∞–≥–∞–∑–∏–Ω")
    try:
        db.User.get(db.User.user_id == message.chat.id)
    except Exception:
        db.User.create(user_id=message.chat.id,
                       user_name=message.from_user.username)


#  ADDITIONAL

@bot.message_handler(func=lambda m: m.text == static.start_markup[1])
def get_billing(message):
    text = f"–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω—É–∂–Ω—É—é –≤–∞–º –º–∞—Å–∫—É - –≤—ã–±–µ—Ä–∏—Ç–µ –µ–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏ " \
           f"–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫—É–ø–∏—Ç—å.\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –∏ —É—Ç–æ—á–Ω–∏–º –≤—Å–µ –¥–µ—Ç–∞–ª–∏! üí≥"
    try:
        db.User.create(user_id=message.chat.id,
                       user_name=message.from_user.username)
    except IntegrityError:
        pass
    bot.send_message(message.chat.id, text,
                     reply_markup=f.create_inline_keyboard(static.cat_dict))


@bot.message_handler(func=lambda m: m.text == static.start_markup[2])
def get_contacts(message):
    text = f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º —Å—é–¥–∞:\nüê∫ <b>@artwallter</b>"
    try:
        db.User.create(user_id=message.chat.id,
                       user_name=message.from_user.username)
    except IntegrityError:
        pass
    bot.send_message(message.chat.id, text, reply_markup=main_menu, parse_mode='html')


@bot.message_handler(func=lambda m: m.text == static.start_markup[3])
def get_new_offers(message):
    text = f"<b>–ú—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ–º –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ:</b>\n\n" \
           f"üíª - <b>–°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç</b> —Å–∞–º–æ–π —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥ –ª—é–±—ã–µ –∑–∞–¥–∞—á–∏\n\n" \
           f"ü§ñ - <b>–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞</b> –¥–ª—è –≤–∞—à–∏—Ö –Ω—É–∂–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã\n\n" \
           f"üéÅ - <b>–°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω</b> –≤ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º–º –∏ –ø–æ–º–æ—á—å –≤–∞–º –≤ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n\n" \
           f"üé≠ - <b>–°–æ–∑–¥–∞—Ç—å –º–∞—Å–∫—É</b>, –∫–æ—Ç–æ—Ä–∞—è –Ω—É–∂–Ω–∞ –∏–º–µ–Ω–Ω–æ –≤–∞–º"
    markup = f.create_inline_keyboard(static.want_dict, 2)
    bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode='html')


#
# ADMIN COMMAND
#


@bot.message_handler(commands=['add'])
def add_products(m):
    if m.from_user.username == 'tmanspace':
        bot.send_message(channel_id, '–ó–∞–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª—ã...')
        print("–ó–∞–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª—ã")
        query = db.Product.delete()
        amount = query.execute()
        for cat in os.listdir('files/'):
            for name in os.listdir(f"files/{cat}"):
                product = f.Product(name, cat)
                for file in os.listdir(f"files/{cat}/{name}"):
                    if file.split('.')[-1] == 'arexport' or file.split('.')[-1] == 'arproj':
                        document = open(f"files/{cat}/{name}/{file}", 'rb')
                        doc = bot.send_document(m.chat.id, document)
                        product.doc_id = doc.document.file_id
                    if file.split('.')[-1] == 'png' or file.split('.')[-1] == 'jpg':
                        document = open(f"files/{cat}/{name}/{file}", 'rb')
                        photo = bot.send_photo(m.chat.id, document)
                        product.photo = photo.photo[0].file_id
                    if file.split('.')[-1] == 'txt':
                        document = open(f"files/{cat}/{name}/{file}", encoding='utf-8', mode='r')
                        arr = document.read().split("\\")
                        product.desc = arr[0]
                        product.price = arr[1]
                if product.price:
                    p = f.add_product(product)
    else:
        return


#
# SHOP
#

@bot.message_handler(func=lambda m: m.text == static.start_markup[0])
def get_shop(m):
    try:
        db.User.create(user_id=m.chat.id,
                       user_name=m.from_user.username)
    except IntegrityError:
        pass
    bot.send_message(m.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤",
                     reply_markup=f.create_inline_keyboard(static.cat_dict))


# CALLBACKS


@bot.callback_query_handler(func=lambda q: q.data[:3] == "cat")
def get_products(q):
    cat_name = q.data[4:]
    sql_query = db.Product.select().where(db.Product.category == cat_name)
    bot.delete_message(q.message.chat.id, q.message.message_id)
    if cat_name == 'MakeUp':
        global make_up_arr
        make_up_arr = sql_query[:]
        get_page(q.message, make_up_arr, 'make_up', 1)
    elif cat_name == '3D':
        global d_arr
        d_arr = sql_query[:]
        get_page(q.message, d_arr, '3d', 1)
    elif cat_name == 'Esthetic':
        global esthetic_arr
        esthetic_arr = sql_query[:]
        get_page(q.message, esthetic_arr, 'esthetic', 1)
    elif cat_name == 'Presets':
        global presets_arr
        presets_arr = sql_query[:]
        get_page(q.message, presets_arr, 'presets', 1)
    elif cat_name == 'Random':
        global random_arr
        random_arr = sql_query[:]
        get_page(q.message, random_arr, 'random', 1)


# BUY


@bot.callback_query_handler(func=lambda q: q.data[:3] == "buy")
def buy_product(q):
    product = db.Product.get(db.Product.product_id == q.data[4:])
    bot.delete_message(
        q.message.chat.id,
        q.message.message_id
    )
    try:
        user = db.User.get(db.User.user_id == q.message.chat.id)
        text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç {product.name}\n" \
               f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ –ø–æ–≤–æ–¥—É –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ!"
        back_keyboard = f.create_inline_keyboard({'back': 'üîô'}, row_width=1)
        bot.send_message(q.message.chat.id, text, reply_markup=back_keyboard)
        bot.send_message(channel_id, f"–ù–æ–≤—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å @{user.user_name}\n–•–æ—á–µ—Ç –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ {product.name}")
        bot.send_document(channel_id, product.product_path)
    except Exception:
        bot.send_message(q.message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', reply_markup=main_menu)


#
# LISTING
#


@bot.callback_query_handler(func=lambda call: call.data.split('#')[0] == 'make_up')
def show_make_up_image(call):
    page = int(call.data.split('#')[1])
    global make_up_arr
    bot.delete_message(
        call.message.chat.id,
        call.message.message_id
    )
    get_page(call.message, make_up_arr, 'make_up', page)


@bot.callback_query_handler(func=lambda call: call.data.split('#')[0] == 'esthetic')
def show_esthetic_image(call):
    page = int(call.data.split('#')[1])
    global esthetic_arr
    bot.delete_message(
        call.message.chat.id,
        call.message.message_id
    )
    get_page(call.message, esthetic_arr, 'esthetic', page)


@bot.callback_query_handler(func=lambda call: call.data.split('#')[0] == 'presets')
def show_presets_image(call):
    page = int(call.data.split('#')[1])
    global presets_arr
    bot.delete_message(
        call.message.chat.id,
        call.message.message_id
    )
    get_page(call.message, presets_arr, 'presets', page)


# WANT

@bot.callback_query_handler(func=lambda q: q.data.split('_')[0] == 'want')
def send_wanted(q):
    data = q.data.split('_')[1]
    service_wanted = ''
    if data == 'site':
        service_wanted += '–°–∞–π—Ç!'
    elif data == 'bot':
        service_wanted += '–ë–æ—Ç!'
    elif data == 'shop':
        service_wanted += '–ú–∞–≥–∞–∑–∏–Ω Inst!'
    else:
        service_wanted += '–ú–∞—Å–∫–∞!'
    bot.delete_message(
        q.message.chat.id,
        q.message.message_id
    )
    try:
        user = db.User.get(db.User.user_id == q.message.chat.id)
        bot.send_message(channel_id, f"<b>{service_wanted}</b>\n\n–ù–æ–≤—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å @{user.user_name}", parse_mode='html')
        back_keyboard = f.create_inline_keyboard({'back': 'üîô'}, row_width=1)
        bot.send_message(q.message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!', reply_markup=back_keyboard)
    except Exception:
        bot.send_message(q.message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', reply_markup=main_menu)

bot.polling()
